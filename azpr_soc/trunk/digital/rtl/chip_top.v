//****************************************************************************************************  
//*---------------Copyright (c) 2016 C-L-G.FPGA1988.lichangbeiju. All rights reserved-----------------
//
//                   --              It to be define                --
//                   --                    ...                      --
//                   --                    ...                      --
//                   --                    ...                      --
//**************************************************************************************************** 
//File Information
//**************************************************************************************************** 
//File Name      : chip_top.v 
//Project Name   : azpr_soc
//Description    : the top level of the project.
//Github Address : github.com/C-L-G/azpr_soc/trunk/ic/digital/rtl/chip_top.v
//License        : Apache-2.0
//**************************************************************************************************** 
//Version Information
//**************************************************************************************************** 
//Create Date    : 2016-11-22 17:00
//First Author   : lichangbeiju
//Last Modify    : 2016-11-23 14:20
//Last Author    : lichangbeiju
//Version Number : 12 commits 
//**************************************************************************************************** 
//Change History(latest change first)
//yyyy.mm.dd - Author - Your log of change
//**************************************************************************************************** 
//2016.11.22 - lichangbeiju - Change the coding style.
//2016.11.22 - lichangbeiju - Add io port.
//*---------------------------------------------------------------------------------------------------

/********** 共通ヘッダファイル **********/
`include "nettype.h"
`include "stddef.h"
`include "global_config.h"

/********** 個別ヘッダファイル **********/
`include "gpio.h"

/********** モジュール **********/
module chip_top (
    /********** クロック & リセット **********/
    input wire                 clk_ref,       // 基底クロック
    input wire                 reset_sw       // グローバルリセット
    /********** UART **********/
    `ifdef IMPLEMENT_UART // UART実装
    , input wire               uart_rx        // UART受信信号
    , output wire              uart_tx        // UART送信信号
    `endif
    /********** 汎用入出力ポート **********/
    `ifdef IMPLEMENT_GPIO // GPIO実装
    `ifdef GPIO_IN_CH    // 入力ポートの実装
    , input wire [`GPIO_IN_CH-1:0]   gpio_in  // 入力ポート
    `endif
    `ifdef GPIO_OUT_CH   // 出力ポートの実装
    , output wire [`GPIO_OUT_CH-1:0] gpio_out // 出力ポート
    `endif
    `ifdef GPIO_IO_CH    // 入出力ポートの実装
    , inout wire [`GPIO_IO_CH-1:0]   gpio_io  // 入出力ポート
    `endif
    `endif
);

    //************************************************************************************************
    // 1.Parameter and constant define
    //************************************************************************************************
    
    
    //************************************************************************************************
    // 2.Register and wire declaration
    //************************************************************************************************
    //------------------------------------------------------------------------------------------------
    // 2.1 the output reg
    //------------------------------------------------------------------------------------------------   

    //------------------------------------------------------------------------------------------------
    // 2.x the test logic
    //------------------------------------------------------------------------------------------------
    wire                       clk;           // クロック
    wire                       clk_;          // 反転クロック
    wire                       chip_reset;    // チップリセット

    //************************************************************************************************
    // 3.Main code
    //************************************************************************************************


    //------------------------------------------------------------------------------------------------
    // 3.1 the master grant logic
    //------------------------------------------------------------------------------------------------

    //************************************************************************************************
    // 4.Sub module instantiation
    //************************************************************************************************

    //------------------------------------------------------------------------------------------------
    // 4.1 the clk generate module
    //------------------------------------------------------------------------------------------------    
    clk_gen clk_gen (
        /********** クロック & リセット **********/
        .clk_ref      (clk_ref),              // 基底クロック
        .reset_sw     (reset_sw),             // グローバルリセット
        /********** 生成クロック **********/
        .clk          (clk),                  // クロック
        .clk_         (clk_),                 // 反転クロック
        /********** チップリセット **********/
        .chip_reset   (chip_reset)            // チップリセット
    );
    //------------------------------------------------------------------------------------------------
    // 4.2 the cpu chip
    //------------------------------------------------------------------------------------------------    
    chip chip (
        /********** クロック & リセット **********/
        .clk      (clk),                      // クロック
        .clk_     (clk_),                     // 反転クロック
        .reset    (chip_reset)                // リセット
        /********** UART **********/
    `ifdef IMPLEMENT_UART
        , .uart_rx  (uart_rx)                 // UART受信波形
        , .uart_tx  (uart_tx)                 // UART送信波形
    `endif
        /********** 汎用入出力ポート **********/
    `ifdef IMPLEMENT_GPIO
    `ifdef GPIO_IN_CH  // 入力ポートの実装
        , .gpio_in (gpio_in)                  // 入力ポート
    `endif
    `ifdef GPIO_OUT_CH // 出力ポートの実装
        , .gpio_out (gpio_out)                // 出力ポート
    `endif
    `ifdef GPIO_IO_CH  // 入出力ポートの実装
        , .gpio_io  (gpio_io)                 // 入出力ポート
    `endif
    `endif
    );

endmodule
//****************************************************************************************************
//End of Mopdule
//****************************************************************************************************
