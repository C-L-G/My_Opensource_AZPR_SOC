#!/usr/local/bin/perl
#****************************************************************************************************   
#-----------------Copyright (c) 2016 C-L-G.FPGA1988.Roger Wang. All rights reserved------------------
#
#                   --              It to be define                --
#                   --                    ...                      --
#                   --                    ...                      --
#                   --                    ...                      --
#**************************************************************************************************** 
#File Information
#**************************************************************************************************** 
#File Name      : cklog 
#Project Name   : scripts
#Description    : The simulation script for nc-verilog : environment and parameter.
#Github Address : https://github.com/C-L-G/scripts/script_header.txt
#License        : CPL
#**************************************************************************************************** 
#Version Information
#**************************************************************************************************** 
#Create Date    : 01-07-2016 17:00(1th Fri,July,2016)
#First Author   : Roger Wang
#Modify Date    : 03-07-2016 14:20(1th Sun,July,2016)
#Last Author    : Roger Wang
#Version Number : 001   
#Last Commit    : 03-07-2016 14:30(1th Sun,July,2016)
#**************************************************************************************************** 
#Revison History
#**************************************************************************************************** 
#03-07-2016 - Roger Wang - Add the File information and the version info.
#02-07-2016 - Roger Wang - The initial version.
#---------------------------------------------------------------------------------------------------- 

#****************************************************************************************************
#1. The package use
#****************************************************************************************************

use Getopt::Long
use Pod::Usage


#****************************************************************************************************
#2. The Argument Get 
#****************************************************************************************************

#----------------------------------------------------------------------------------------------------
#2.1 The argument initial
#----------------------------------------------------------------------------------------------------

$simargs 	= "";
$verdiargs 	= "";
$post 		= 5;
$clkrate 	= 0;

GetOptions(
	"tc=s" 	=> 	\$tcname,
	"pt=i" 	=> 	\$post,
	"emu"  	=> 	\$emu,
	"dp"	=> 	\$dump,
	"cm"	=>	\$coverage,
	"ntfy"	=>	\$notifier,
	"help"	=>	\$help,
	"hsim"	=>	\$hsim,
	"hsp"	=>	\$hsp,
	"cr=i"	=>	\$clkrate,	
) or pod2usage(1);

#new add for the no tc parameter
if(($tcname eq "") && ($help eq "")){
	print "";
	print "";
	print "";
	print "";
	exit;		
}

#pod the help information
pod2usage(1) if $help;

#FPGA and ASIC
if($emu){
	$rtlpath 	= "$ENV{gt5230}/fpga/src/rtl";
	$tcpath 	= "$ENV{gt5230}/fpga/tc";
	$tbpath 	= "$ENV{gt5230}/fpga/tb";
	$modelpath 	= "$ENV{gt5230}/fpga/model";
	$flistpath 	= "$ENV{gt5230}/fpga/flist";
}
else{
	$rtlpath 	= "$ENV{gt5230}/digital/rtl";
	$tcpath 	= "$ENV{gt5230}/digital/verif/tc";
	$tbpath 	= "$ENV{gt5230}/digital/verif/tb";
	$libpath 	= "$ENV{gt5230}/digital/verif/lib";
	$vecpath 	= "$ENV{gt5230}/digital/hspice/stimulus";
	$hsimpath 	= "$ENV{gt5230}/digital/verif/hsim/stimulus";
	$modelpath 	= "$ENV{gt5230}/digital/verif/model";
	$flistpath 	= "$ENV{gt5230}/digital/verif/flist";
}
if($emu){
	print "Emulation Simulation!\n";
}
else{
	print "ASIC Simulation!\n";
}

#----------------------------------------------------------------------------------------------------
#2.2 File check and open
#----------------------------------------------------------------------------------------------------
if((!-e "$ENV{gt5230}/digital/verif/log/bt${batnum}_subt.bat"){
	print "\n$ENV{gt5230}/digital/verif/log/bt${batnum}_subt.bat is for checking log file,but Not Exist.\n";
	print "Now please copy bt${batnum}_subt.bat to $ENV{gt5230}/digital/verif/log/ for checking log file.\n";
	exit;
}



open	SUBTBAT,"< $ENV{gt5230}/digital/verif/log/bt${batnum}_subt.bat" or die "Open file subt.bat error : $!\n";
open	FPASS,"> ./bt${batnum}_tc_pass.list" or die "Open file bt${batnum}_tc_pass.list error : $!\n";
open	FFAIL,"> ./bt${batnum}_tc_fail.list" or die "Open file bt${batnum}_tc_fail.list error : $!\n";

$tcpass_cnt = 0;
$tcfail_cnt = 0;
	while($line = <SUBTBAT){
		if($line =~ /runn(\s+)-pt(\w+)(\s+)-cr(\s+)(\w+)(\s+).*-tc(\s+)(.*)/){
			$post 		= $3;
			$clkrate	= $6;
			$tcname		= $9;
			$logname 	= "${tcname}_pt${post}_cr$clkrate";
			print "Checking ${logname}.log...\n";
			if((!-e "$ENV{gt5230}/digital/verif/log/${logname}.log"){
				open TVLOG,"< $ENV{gt5230}/digital/verif/log/${logname}.log"; or die "Open file ${logname}.log error : $!\n";
				while($line0 = <TVLOG){
					$tmp = $line0;
					$tmp =~ s/\s+//g;
					if($tmp = ~ /(\*)+TESTSUCCESFULLCOMPLETED(\*)+/){
						$tvpass_char = $line0;
						$tvpass_flag = 1;
					}
				}
			close TVLOG;
			if(tvpass_flag == 1){
				print FPASS "=============$tcname============";
				chomp($tvpass_char);
				print FPASS "${logname}.log: $tvpass_char.\n";
				print FPASS "\n";
				$tcpass_cnt++
			}
			else{
				print FFAIL "=============$tcname============";
				chomp($tvpass_char);
				print FFAIL "${logname}.log: existing.\n";
				print FFAIL "\n";
				$tcfail_cnt++;			
			}
			}
			else{
				print FFAIL "=============$tcname============";
				print FFAIL "${logname}.log: no existing.\n";
				print FFAIL "\n";
				$tcfail_cnt++;
			}			
		}	
	}
	
print FPASS "TESTCASE PASS NUM = %d\n",$tcpass_cnt;
print FPASS "TESTCASE FAIL NUM = %d\n",$tcfail_cnt;
print "Total testcase num = %d\n",($tcpass_cnt + $tcfail_cnt);
print "Total pass num = %d\n",$tcpass_cnt;
print "Total fail num = %d\n",$tcfail_cnt;

close FPASS;
close FFAIL;
close SUBBAT;



__END__

=head1 NAME
	script for simulation
=head1 SYNOPSIS
	runn -tc = iic_1 -pt = 3 -dp -cm -ntfy
=head1 OPTION

=over 8

=item [-help]
	Print help message.	
=item [-hsp]
	generate hspice vector for sim.
=item [-cr=i]
	clock rate select.
=back

=cut
































































































